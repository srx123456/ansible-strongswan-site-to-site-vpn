- name: detect private interface and subnet
  hosts: all
  tasks:
    - name: set_fact | figure out network device of private network
      set_fact:
        private_interface: "{{ hostvars[inventory_hostname]['ansible_' + item]['device'] }}"
      when:
        - hostvars[inventory_hostname]['ansible_' + item].ipv4 is defined
        - hostvars[inventory_hostname]['ansible_' + item]['ipv4']['address']  == hostvars[inventory_hostname]['private_ip']
      with_items: "{{ ansible_interfaces }}"
    
    - name: set_fact | private subnet cidr mask
      set_fact:
        private_subnet: "{{ hostvars[inventory_hostname]['ansible_' + private_interface]['ipv4']['network'] }}/{{ (hostvars[inventory_hostname]['ansible_' + private_interface]['ipv4']['address'] + '/' + hostvars[inventory_hostname]['ansible_' + private_interface]['ipv4']['netmask'] ) | ipaddr('prefix') }}"
    
    - name: install strongswan
      apt:
        name: strongswan
        cache_valid_time: 3600
        state: present
    
    - name: set net.ipv4.ip_forward to 1
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
    
    - name: write ipsec conf
      template:
        src: ipsec_conf.j2
        dest: /etc/ipsec.conf
      notify: reload ipsec  
    
    - name: write the vpn secrets file
      template:
        src: ipsec_secrets.j2
        dest: /etc/ipsec.secrets
      notify: reload ipsec

  handlers:
    - name: reload ipsec
      service:
        name: ipsec
        state: restarted

# - name: register hostvars to json file
#   hosts: all
#   tasks:    
#     - name: get hostvars
#       copy:
#         content: "{{ hostvars | to_nice_json }}"
#         dest: "/home/kenneth/myansible/ipsec/hostvars.json"
#       delegate_to: localhost
#     # - name: debug
#     #   debug:
#     #     var: hostvars

#  ip: "{{ (ansible_default_ipv4.address + '/' + ansible_default_ipv4.netmask) | ipaddr('prefix') }}"